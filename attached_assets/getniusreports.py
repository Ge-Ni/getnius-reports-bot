import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import sqlite3
from datetime import datetime
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN")  # Get token from environment variables
if not TOKEN:
    raise ValueError("No BOT_TOKEN found in environment variables")

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
categories = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="FinTech")],
        [KeyboardButton(text="Automotive")],
        [KeyboardButton(text="Retail")],
        [KeyboardButton(text="–î—Ä—É–≥–∏–µ")]
    ],
    resize_keyboard=True
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    category = State()
    description = State()
    website = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_reports(category):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á—ë—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('reports.db')
    cursor = conn.cursor()
    cursor.execute("SELECT title, source, file_path FROM reports WHERE category=?", (category,))
    reports = cursor.fetchall()
    conn.close()
    return reports

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:", reply_markup=categories)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(lambda message: message.text in ["FinTech", "Automotive", "Retail", "–î—Ä—É–≥–∏–µ"])
async def get_category(message: types.Message, state: FSMContext):
    category = message.text
    await state.update_data(category=category)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã...",
                         reply_markup=types.ReplyKeyboardRemove())  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    reports = get_reports(category)
    if reports:
        for report in reports:
            title, source, file_path = report
            if category == "FinTech":
                # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ FinTech –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
                await message.answer(f"üìÑ **{title}**\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n[–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª](https://disk.yandex.com/d/TJtgoNkQ8aQfpw)", parse_mode="Markdown")
            elif category == "Automotive":
                # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Automotive –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
                await message.answer(f"üìÑ **{title}**\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n[–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª](https://disk.yandex.com/d/O5FL51jLxs9vbg)", parse_mode="Markdown")
            else:
                await message.answer(f"üìÑ **{title}**\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n–§–∞–π–ª: {file_path}")
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã (–¥–ª—è —Ç–µ—Å—Ç–∞)
    await asyncio.sleep(3)
    await message.answer(
        "–í—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç—á–µ—Ç—ã. –•–æ—Ç–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
                [KeyboardButton(text="–ü–æ–∑–∂–µ")]
            ],
            resize_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∑–∂–µ"
@router.message(lambda message: message.text == "–ü–æ–∑–∂–µ")
async def handle_later(message: types.Message, state: FSMContext):
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–•–æ—Ä–æ—à–æ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /create_profile",
                         reply_markup=categories)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def create_profile(message: types.Message, state: FSMContext):
    await message.answer("üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç (–¥–æ 140 —Å–∏–º–≤–æ–ª–æ–≤):",
                         reply_markup=types.ReplyKeyboardRemove())  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await state.set_state(Form.description)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
@router.message(Form.description, lambda message: len(message.text) <= 140)
async def get_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üåç –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    await state.set_state(Form.website)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç
@router.message(Form.website, lambda message: message.text.startswith("http"))
async def get_website(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    category = user_data.get("category")
    description = user_data.get("description")
    website = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_user(message.from_user.id, category, description, website)

    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç—á–µ—Ç—ã –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.")
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:", reply_markup=categories)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users (–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
@router.message(Command("users"))
async def show_users(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()

    if users:
        response = "–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            user_id, category, description, website, created_at = user
            response += (
                f"üë§ ID: {user_id}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üåç –°–∞–π—Ç: {website}\n"
                f"üïí –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}\n\n"
            )
        await message.answer(response)
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

# –†–µ–≥—É–ª—è—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–æ–≤
async def send_regular_reports():
    while True:
        await asyncio.sleep(86400)  # –†–∞–∑ –≤ —Å—É—Ç–∫–∏
        conn = sqlite3.connect("database.db")
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users")
        users = cursor.fetchall()
        for user in users:
            user_id, category, _, _, _ = user
            reports = get_reports(category)
            if reports:
                for report in reports:
                    title, source, file_path = report
                    if category == "FinTech":
                        # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ FinTech –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
                        await bot.send_message(chat_id=user_id, text=f"üìÑ **{title}**\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n[–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª](https://disk.yandex.com/d/TJtgoNkQ8aQfpw)", parse_mode="Markdown")
                    elif category == "Automotive":
                        # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Automotive –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
                        await bot.send_message(chat_id=user_id, text=f"üìÑ **{title}**\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n[–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª](https://disk.yandex.com/d/O5FL51jLxs9vbg)", parse_mode="Markdown")
                    else:
                        await bot.send_message(chat_id=user_id, text=f"üìÑ **{title}**\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n–§–∞–π–ª: {file_path}")
        conn.close()

async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    asyncio.create_task(send_regular_reports())  # –ó–∞–ø—É—Å–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def add_user(user_id, category, description, website):
    conn = sqlite3.connect('reports.db')
    cursor = conn.cursor()
    timestamp = datetime.now().isoformat()
    cursor.execute("INSERT INTO users (user_id, category, description, website, created_at) VALUES (?, ?, ?, ?, ?)",
                   (user_id, category, description, website, timestamp))
    conn.commit()
    conn.close()

def get_all_users():
    conn = sqlite3.connect('reports.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users")
    users = cursor.fetchall()
    conn.close()
    return users